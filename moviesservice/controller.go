package moviesservice

import (
	"encoding/json"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
"fmt"
    "github.com/gorilla/mux"
)

//Controller ...
type Controller struct {
	Repository Repository
}

// Index GET /
func (c *Controller) Index(w http.ResponseWriter, r *http.Request) {
	movies := c.Repository.GetMovies() // list of all Movies
	// log.Println(Movies)
	data, _ := json.Marshal(movies)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	w.Write(data)
	return
}

// AddMovie POST /
func (c *Controller) AddMovie(w http.ResponseWriter, r *http.Request) {
	var movie Movie
	body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576)) // read the body of the request

	log.Println(body)

	if err != nil {
		log.Fatalln("Error AddMovie", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	if err := r.Body.Close(); err != nil {
		log.Fatalln("Error AddMovie", err)
	}

	if err := json.Unmarshal(body, &movie); err != nil { // unmarshall body contents as a type Candidate
		w.WriteHeader(422) // unprocessable entity
		log.Println(err)
		if err := json.NewEncoder(w).Encode(err); err != nil {
			log.Fatalln("Error AddMovie unmarshalling data", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
	}

	log.Println(movie)
	success := c.Repository.AddMovie(movie) // adds the Movie to the DB
	if !success {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusCreated)
	return
}
// GetMovie GET - Gets a single movie by ID /
func (c *Controller) GetMovie(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	log.Println(vars)

	id := vars["id"] // param id
	log.Println(id)

	movieid, err := strconv.Atoi(id)

	if err != nil {
		log.Fatalln("Error GetMovie", err)
	}

	movie := c.Repository.GetMovieById(movieid)
	data, _ := json.Marshal(movie)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	w.Write(data)
	return
}

// DeleteMovie DELETE /
func (c *Controller) DeleteMovie(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	log.Println(vars)
	id := vars["id"] // param id
	log.Println(id)

	movieid, err := strconv.Atoi(id)

	if err != nil {
		log.Fatalln("Error GetMovie", err)
	}

	if err := c.Repository.DeleteMovie(movieid); err != "" { // delete a movie by id
		log.Println(err)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	return
}



// UpdateMovie PUT /
func (c *Controller) UpdateMovie(w http.ResponseWriter, r *http.Request) {
	var movie Movie
	body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576)) // read the body of the request
	if err != nil {
		log.Fatalln("Error UpdateMovie", err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	fmt.Println("1")
	if err := r.Body.Close(); err != nil {
		log.Fatalln("Error UpdateMovie", err)
	}
	fmt.Println("2")
	if err := json.Unmarshal(body, &movie); err != nil { // unmarshall body contents as a type Candidate
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(422) // unprocessable entity
		if err := json.NewEncoder(w).Encode(err); err != nil {
			log.Fatalln("Error UpdateMovie unmarshalling data", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
	}
	fmt.Println("3")
	log.Println(movie.ID)
	success := c.Repository.UpdateMovie(movie) // updates the movie in the DB
	fmt.Println("4")
	if !success {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	fmt.Println("5")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.WriteHeader(http.StatusOK)
	return
}

