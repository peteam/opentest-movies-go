pipeline {
 agent {
  label "jenkins-go"
 }
 environment {
  ORG = 'peteam'
  APP_NAME = 'opentest-movies-go'
  CHARTMUSEUM_CREDS = credentials('jenkins-x-chartmuseum')
  DOCKER_REGISTRY_ORG = 'peteam'
  GO111MODULE = 'on'
 }
 stages {
  stage('PREVIEW-PR') {
   when {
    branch 'PR-*'
   }
   environment {
    PREVIEW_VERSION = "0.0.0-SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER"
    PREVIEW_NAMESPACE = "$APP_NAME-$BRANCH_NAME".toLowerCase()
    HELM_RELEASE = "$PREVIEW_NAMESPACE".toLowerCase()
   }
   steps {
    container('go') {
     dir('/home/jenkins/go/src/github.com/peteam/opentest-movies-go') {
      checkout scm
      sh "go get github.com/google/uuid"
      sh "go mod tidy"
      sh "go get -u github.com/cweill/gotests/..."
      sh "go get github.com/tebeka/go2xunit/..."
      sh "go get github.com/securego/gosec/cmd/gosec/..."
      sh "go get github.com/securego/gosec"      

      sh "make linux"
      sh "gotests -all -w ."
      sh "go test -v | go2xunit -output test_unit_output.xml"
      sh "go test -coverprofile=coverage.out"
      sh "go tool cover -func=coverage.out > test_coverage_output.out"
      //sh "gosec -include=G505 -exclude=G101,G102,G103,G104,G105,G106,G107,G201,G202,G203,G204,G301,G302,G303,G304,G305,G401,G402,G403,G404,G501,G502,G503,G504 -nosec=true -fmt=json -out=test_security_output.json ."
      sh "export VERSION=$PREVIEW_VERSION && skaffold build -f skaffold.yaml"
      sh "jx step post build --image $DOCKER_REGISTRY/$ORG/$APP_NAME:$PREVIEW_VERSION"
     }
     dir('/home/jenkins/go/src/github.com/peteam/opentest-movies-go/charts/preview') {
      sh "make preview"
      sh "jx preview --app $APP_NAME --dir ../.."
     }
    }
   }
  }
  
  stage('BUILD-BENCH') {
   when {
    branch 'master'
    checkout scm
   }
   steps {
    container('go') {
     dir('/home/jenkins/go/src/github.com/peteam/opentest-movies-go/benchmark/user-files') {
      

      sh 'ls'
      sh 'pwd'
      
      sh 'cd benchmark'
      sh 'ls'

      sh 'docker pull uwdcicdopt.azurecr.io/opentest-gatling:latest'      
      sh 'docker run --rm -v ${WORKSPACE}/benchmark/user-files:/opt/gatling/user-files  uwdcicdopt.azurecr.io/opentest-gatling'     
      
      
      
      /*ensure we're not on a detached head
      sh "git checkout master"
      sh "git config --global credential.helper store"
      sh "jx step git credentials"
      sh "go mod tidy"
      sh "go get github.com/tebeka/go2xunit"
      sh "go get github.com/securego/gosec"

      // so we can retrieve the version in later steps
      sh "echo \$(jx-release-version) > VERSION"
      sh "jx step tag --version \$(cat VERSION)"
      sh "make build"
      sh "go test -v unittest/unit_test.go"
      sh "go test -coverprofile unit_test_coverage.out"
      sh "go tool cover -html=unit_test_coverage.out -o ucoverage.html"      
      sh "export VERSION=`cat VERSION` && skaffold build -f skaffold.yaml"
      sh "jx step post build --image $DOCKER_REGISTRY/$ORG/$APP_NAME:\$(cat VERSION)"
      */
      sh 'ls'
      
     }
    }
   }
  }

  stage('STAGE') {
   when {
    branch 'master'
   }
   steps {
    container('go') {
     dir('/home/jenkins/go/src/github.com/peteam/opentest-movies-go/charts/opentest-movies-go') {
      sh "jx step changelog --version v\$(cat ../../VERSION)"

      // release the helm chart
      sh "jx step helm release"

      // promote through all 'Auto' promotion Environments
      sh "jx promote -b --all-auto --timeout 1h --version \$(cat ../../VERSION)"
     }
    }
   }
  }

  stage('PACT-VALIDATE') {
   when {
    branch 'master'
   }
   steps {
    container('go') {
     dir('/home/jenkins/go/src/github.com/peteam/opentest-movies-go') 
     {

        sh "curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.69.0/pact-1.69.0-linux-x86_64.tar.gz"
        sh "tar xzf pact-1.69.0-linux-x86_64.tar.gz"
        sh "cp -a /home/jenkins/go/src/github.com/peteam/opentest-movies-go/pact/bin/. /usr/local/git/bin/"
        sh "cp -a /home/jenkins/go/src/github.com/peteam/opentest-movies-go/pact/. /usr/local/git/"
        
        sh "go test -v testutils/ingest_data_test.go" //Generate Test Data - Pipeline Orchestration. 
        sh "go test -v pacttest/validate_pact_test.go" //Publish results to PACT
     }
    }
   }
  }
 }
}
