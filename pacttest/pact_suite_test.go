// Package main contains a runnable Consumer Pact test example.
package pacttest

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/pact-foundation/pact-go/dsl"
	"github.com/pact-foundation/pact-go/types"
)

var pact dsl.Pact

func TestMain(m *testing.M) {
	// Setup Pact and related test stuff
	setup()

	// Run all the tests
	code := m.Run()

	// Shutdown the Mock Service and Write pact files to disk
	pact.WritePact()
	pact.Teardown()

	//publish to broker

	p := dsl.Publisher{}

	err := p.Publish(types.PublishRequest{
		PactURLs:        []string{filepath.FromSlash(fmt.Sprintf("%s/Client-Consumer-Discovery-Movies-API.json", pact.PactDir))},
		PactBroker:      "http://pact.opentest.run",
		ConsumerVersion: "2.0.0",
		Tags:            []string{"master", "dev"},
	})

	if err != nil {
		log.Println("ERROR: ", err)
	}
	//report
	os.Exit(code)
}

func TestGetMovies(t *testing.T) {
	// Pass in test case
	var test = func() error {
		u := fmt.Sprintf("http://localhost:%d/", pact.Server.Port)
		req, err := http.NewRequest("GET", u, strings.NewReader(``))
		req.Header.Set("Content-Type", "application/json")
		if err != nil {
			return err
		}
		if _, err = http.DefaultClient.Do(req); err != nil {
			return err
		}

		return err
	}

	// Set up our expected interactions.
	pact.
		AddInteraction().
		Given("Get All Movies").
		UponReceiving("A request to get all Movies").
		WithRequest(dsl.Request{
			Method:  "GET",
			Path:    dsl.String("/"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json; charset=UTF-8")},
			Body: dsl.EachLike(
				dsl.Matcher{
					"Type": dsl.Like("Movies"),
				},
				1),
		})

		// Verify with a mocking
	if err := pact.Verify(test); err != nil {
		log.Fatalf("Error on Verify: %v", err)
	}

	fmt.Println("Test Passed!")

}

func TestGetMovieById(t *testing.T) {

	// Set up our expected interactions.
	pact.
		AddInteraction().
		Given("Get Movie by Id").
		UponReceiving("A request to get Movie by ID").
		WithRequest(dsl.Request{
			Method:  "GET",
			Path:    dsl.Term("/Movies/10", "/Movies/[0-9]+"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json; charset=UTF-8")},
		})

	// Verify with a mocking
	var test = func() error {
		u := fmt.Sprintf("http://localhost:%d/Movies/10", pact.Server.Port)
		req, err := http.NewRequest("GET", u, strings.NewReader(``))
		req.Header.Set("Content-Type", "application/json")
		if err != nil {
			return err
		}
		if _, err = http.DefaultClient.Do(req); err != nil {
			return err
		}

		return err
	}

	if err := pact.Verify(test); err != nil {
		log.Fatalf("Error on Verify: %v", err)
	}

	fmt.Println("Test Passed!")

}

// Setup common test data
func setup() {
	pact = setupPact()

	// Proactively start service to get access to the port
	pact.Setup(true)
}

// Setup PACT Client
func setupPact() dsl.Pact {
	return dsl.Pact{
		Consumer:                 "Client-Consumer",
		Provider:                 "Discovery-Movies-API",
		Host:                     "localhost",
		DisableToolValidityCheck: true,
		// LogLevel:                 "DEBUG",
	}
}
