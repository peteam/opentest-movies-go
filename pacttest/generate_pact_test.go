// Package main contains a runnable Consumer Pact test example.
package main

import (
	"fmt"
	"log"
	"net/http"
	"path/filepath"
	"strings"
	"testing"

	"github.com/pact-foundation/pact-go/dsl"
	"github.com/pact-foundation/pact-go/types"
)

// Example Pact: How to run me!
// 1. go test -v -run generate_pact_test

func TestPublishPact(t *testing.T) {
	// type Movie struct {
	// 	Type string `json:"Type" pact:"example=Movies"`
	// }

	pact := setupPact()

	defer pact.Teardown()

	// Pass in test case
	var test = func() error {
		u := fmt.Sprintf("http://localhost:%d/", pact.Server.Port)
		req, err := http.NewRequest("GET", u, strings.NewReader(``))
		req.Header.Set("Content-Type", "application/json")
		if err != nil {
			return err
		}
		if _, err = http.DefaultClient.Do(req); err != nil {
			return err
		}

		return err
	}

	// Set up our expected interactions.
	pact.
		AddInteraction().
		Given("Get All Movies").
		UponReceiving("A request to get all Movies").
		WithRequest(dsl.Request{
			Method:  "GET",
			Path:    dsl.String("/"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json; charset=UTF-8")},
			Body: dsl.EachLike(
				dsl.Matcher{
					"Type": dsl.Like("Movies"),
				},
				1),
		})

	// Verify with a mocking
	if err := pact.Verify(test); err != nil {
		log.Fatalf("Error on Verify: %v", err)
	}
	pact.WritePact()
	fmt.Println("Test Passed!")

	// Publish the Pacts...
	p := dsl.Publisher{}

	err := p.Publish(types.PublishRequest{
		PactURLs:        []string{filepath.FromSlash(fmt.Sprintf("%s/Client-Consumer-Discovery-Movies-API.json", pact.PactDir))},
		PactBroker:      "http://pact.opentest.run",
		ConsumerVersion: "2.0.0",
		Tags:            []string{"master", "dev"},
	})

	if err != nil {
		log.Println("ERROR: ", err)
	}
}

// Setup the Pact client.
func setupPact() dsl.Pact {
	return dsl.Pact{
		Consumer:                 "Client-Consumer",
		Provider:                 "Discovery-Movies-API",
		Host:                     "localhost",
		DisableToolValidityCheck: true,
		LogLevel:                 "DEBUG",
	}
}
