// Package main contains a runnable Provider Pact test example.
package pacttest

import (
	"fmt"
	"os"
	"testing"

	"github.com/pact-foundation/pact-go/dsl"
	"github.com/pact-foundation/pact-go/types"
)

var curDir, _ = os.Getwd()
var pactDirectory = fmt.Sprintf("%s/../../pacts", curDir)

// Example Provider Pact: How to run me!
// 1. go test -v -run validate_pact
func TestPublishResult(t *testing.T) {
	// Verify the Provider - Latest Published Pacts for any known consumers
	pact := createPact()

	os.Setenv("PACT_INTEGRATED_TESTS", "true")
	os.Setenv("PACT_BROKER_HOST", "http://pact.opentest.run")
	var providerBaseURL = "http://opentest-movies-go.peteam-staging.opentest.run"
	// Pull from pact broker, used in e2e/integrated tests for pact-go release
	if os.Getenv("PACT_INTEGRATED_TESTS") != "" {
		var brokerHost = os.Getenv("PACT_BROKER_HOST")

		// Verify the Provider - Latest Published Pacts for any known consumers
		_, err := pact.VerifyProvider(t, types.VerifyRequest{
			ProviderBaseURL: providerBaseURL,
			BrokerURL:       brokerHost,
			PublishVerificationResults: true,
			ProviderVersion:            "1.0.0",
		})

		if err != nil {
			t.Fatal(err)
		}

		// Verify the Provider - Tag-based Published Pacts for any known consumers
		_, err = pact.VerifyProvider(t, types.VerifyRequest{
			ProviderBaseURL: providerBaseURL,
			BrokerURL:       brokerHost,
			Tags:            []string{"master"},
			PublishVerificationResults: true,
			ProviderVersion:            "1.0.0",
		})

		if err != nil {
			t.Fatal(err)
		}

	} else {
		t.Log("Skipping pulling from broker as PACT_INTEGRATED_TESTS is not set")
	}
}

// Setup the Pact client.
func createPact() dsl.Pact {
	return dsl.Pact{
		Consumer: "Client-Consumer",
		Provider: "Discovery-Movies-API",
		PactDir:                  pactDirectory,
		DisableToolValidityCheck: true,
	}
}
